2025/05/28 13:17:59 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.20 (default, Oct  3 2024, 15:24:27) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 730659245
    GPU 0,1,2,3: NVIDIA GeForce RTX 3090
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.6, V11.6.124
    GCC: gcc (Ubuntu 9.5.0-6ubuntu2) 9.5.0
    PyTorch: 1.13.1+cu116
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1+cu116
    OpenCV: 4.11.0
    MMEngine: 0.10.7

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 730659245
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/28 13:18:00 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data = dict(
    test=dict(
        ann_file='data/VOCdevkit/VOC2007/ImageSets/Main/test.txt',
        img_prefix='data/VOCdevkit/VOC2007/JPEGImages/',
        type='VOCInstanceDataset'))
data_root = 'data/VOCdevkit/'
dataset_type = 'VOCDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(
        draw=True,
        test_out_dir='outputs/vis_test',
        type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
evaluation = dict(metric=[
    'bbox',
    'segm',
])
launcher = 'none'
load_from = 'work_dirs/mask-rcnn_r50_fpn_1x_voc0712/epoch_12.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
max_epochs = 12
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_mask=True,
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=20,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        mask_head=None,
        mask_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=14, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            mask_thr_binary=0.5,
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            mask_size=28,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='MaskRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='VOC2007/ImageSets/Main/test.txt',
        backend_args=None,
        data_prefix=dict(sub_data_root='VOC2007/'),
        data_root='data/VOCdevkit/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1000,
                600,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=False),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='VOCDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(eval_mode='11points', metric='mAP', type='VOCMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1000,
        600,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=False),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=12, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=2,
    dataset=dict(
        dataset=dict(
            datasets=[
                dict(
                    ann_file='VOC2007/ImageSets/Main/trainval.txt',
                    backend_args=None,
                    data_prefix=dict(sub_data_root='VOC2007/'),
                    data_root='data/VOCdevkit/',
                    filter_cfg=dict(
                        bbox_min_size=32, filter_empty_gt=True, min_size=32),
                    pipeline=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(
                            type='LoadAnnotations',
                            with_bbox=True,
                            with_mask=False),
                        dict(
                            keep_ratio=True,
                            scale=(
                                1000,
                                600,
                            ),
                            type='Resize'),
                        dict(prob=0.5, type='RandomFlip'),
                        dict(type='PackDetInputs'),
                    ],
                    type='VOCDataset'),
                dict(
                    ann_file='VOC2012/ImageSets/Main/trainval.txt',
                    backend_args=None,
                    data_prefix=dict(sub_data_root='VOC2012/'),
                    data_root='data/VOCdevkit/',
                    filter_cfg=dict(
                        bbox_min_size=32, filter_empty_gt=True, min_size=32),
                    pipeline=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(
                            type='LoadAnnotations',
                            with_bbox=True,
                            with_mask=False),
                        dict(
                            keep_ratio=True,
                            scale=(
                                1000,
                                600,
                            ),
                            type='Resize'),
                        dict(prob=0.5, type='RandomFlip'),
                        dict(type='PackDetInputs'),
                    ],
                    type='VOCDataset'),
            ],
            ignore_keys=[
                'dataset_type',
            ],
            type='ConcatDataset'),
        times=3,
        type='RepeatDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=False),
    dict(keep_ratio=True, scale=(
        1000,
        600,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='VOC2007/ImageSets/Main/test.txt',
        backend_args=None,
        data_prefix=dict(sub_data_root='VOC2007/'),
        data_root='data/VOCdevkit/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1000,
                600,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=False),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='VOCDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(eval_mode='11points', metric='mAP', type='VOCMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/config_test'

2025/05/28 13:18:02 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/28 13:18:02 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/28 13:18:03 - mmengine - WARNING - The prefix is not set in metric class DumpDetResults.
2025/05/28 13:18:03 - mmengine - INFO - Load checkpoint from work_dirs/mask-rcnn_r50_fpn_1x_voc0712/epoch_12.pth
2025/05/28 13:18:11 - mmengine - INFO - Epoch(test) [  50/4952]    eta: 0:13:22  time: 0.1637  data_time: 0.0878  memory: 349  
2025/05/28 13:18:17 - mmengine - INFO - Epoch(test) [ 100/4952]    eta: 0:10:55  time: 0.1063  data_time: 0.0806  memory: 369  
2025/05/28 13:18:22 - mmengine - INFO - Epoch(test) [ 150/4952]    eta: 0:10:06  time: 0.1091  data_time: 0.0834  memory: 357  
2025/05/28 13:18:28 - mmengine - INFO - Epoch(test) [ 200/4952]    eta: 0:09:39  time: 0.1089  data_time: 0.0833  memory: 349  
2025/05/28 13:18:33 - mmengine - INFO - Epoch(test) [ 250/4952]    eta: 0:09:19  time: 0.1069  data_time: 0.0813  memory: 369  
2025/05/28 13:18:39 - mmengine - INFO - Epoch(test) [ 300/4952]    eta: 0:09:07  time: 0.1116  data_time: 0.0857  memory: 362  
2025/05/28 13:18:44 - mmengine - INFO - Epoch(test) [ 350/4952]    eta: 0:08:56  time: 0.1094  data_time: 0.0838  memory: 369  
2025/05/28 13:18:50 - mmengine - INFO - Epoch(test) [ 400/4952]    eta: 0:08:46  time: 0.1092  data_time: 0.0834  memory: 369  
2025/05/28 13:18:55 - mmengine - INFO - Epoch(test) [ 450/4952]    eta: 0:08:36  time: 0.1081  data_time: 0.0823  memory: 358  
2025/05/28 13:19:00 - mmengine - INFO - Epoch(test) [ 500/4952]    eta: 0:08:29  time: 0.1107  data_time: 0.0833  memory: 357  
2025/05/28 13:19:06 - mmengine - INFO - Epoch(test) [ 550/4952]    eta: 0:08:20  time: 0.1065  data_time: 0.0812  memory: 362  
2025/05/28 13:19:11 - mmengine - INFO - Epoch(test) [ 600/4952]    eta: 0:08:14  time: 0.1125  data_time: 0.0865  memory: 357  
2025/05/28 13:19:17 - mmengine - INFO - Epoch(test) [ 650/4952]    eta: 0:08:07  time: 0.1095  data_time: 0.0843  memory: 362  
2025/05/28 13:19:22 - mmengine - INFO - Epoch(test) [ 700/4952]    eta: 0:07:59  time: 0.1077  data_time: 0.0821  memory: 357  
2025/05/28 13:19:28 - mmengine - INFO - Epoch(test) [ 750/4952]    eta: 0:07:53  time: 0.1097  data_time: 0.0840  memory: 362  
2025/05/28 13:19:33 - mmengine - INFO - Epoch(test) [ 800/4952]    eta: 0:07:46  time: 0.1074  data_time: 0.0820  memory: 357  
2025/05/28 13:19:39 - mmengine - INFO - Epoch(test) [ 850/4952]    eta: 0:07:39  time: 0.1086  data_time: 0.0830  memory: 358  
2025/05/28 13:19:44 - mmengine - INFO - Epoch(test) [ 900/4952]    eta: 0:07:33  time: 0.1092  data_time: 0.0836  memory: 369  
2025/05/28 13:19:49 - mmengine - INFO - Epoch(test) [ 950/4952]    eta: 0:07:26  time: 0.1069  data_time: 0.0814  memory: 362  
2025/05/28 13:19:55 - mmengine - INFO - Epoch(test) [1000/4952]    eta: 0:07:21  time: 0.1106  data_time: 0.0830  memory: 369  
2025/05/28 13:20:00 - mmengine - INFO - Epoch(test) [1050/4952]    eta: 0:07:14  time: 0.1072  data_time: 0.0816  memory: 369  
2025/05/28 13:20:06 - mmengine - INFO - Epoch(test) [1100/4952]    eta: 0:07:09  time: 0.1142  data_time: 0.0883  memory: 358  
2025/05/28 13:20:12 - mmengine - INFO - Epoch(test) [1150/4952]    eta: 0:07:03  time: 0.1105  data_time: 0.0849  memory: 369  
2025/05/28 13:20:17 - mmengine - INFO - Epoch(test) [1200/4952]    eta: 0:06:57  time: 0.1082  data_time: 0.0825  memory: 362  
2025/05/28 13:20:22 - mmengine - INFO - Epoch(test) [1250/4952]    eta: 0:06:52  time: 0.1100  data_time: 0.0825  memory: 358  
2025/05/28 13:20:28 - mmengine - INFO - Epoch(test) [1300/4952]    eta: 0:06:46  time: 0.1090  data_time: 0.0833  memory: 358  
2025/05/28 13:20:33 - mmengine - INFO - Epoch(test) [1350/4952]    eta: 0:06:40  time: 0.1104  data_time: 0.0849  memory: 369  
2025/05/28 13:20:39 - mmengine - INFO - Epoch(test) [1400/4952]    eta: 0:06:34  time: 0.1102  data_time: 0.0851  memory: 357  
2025/05/28 13:20:44 - mmengine - INFO - Epoch(test) [1450/4952]    eta: 0:06:28  time: 0.1067  data_time: 0.0816  memory: 369  
2025/05/28 13:20:50 - mmengine - INFO - Epoch(test) [1500/4952]    eta: 0:06:23  time: 0.1101  data_time: 0.0847  memory: 362  
2025/05/28 13:20:55 - mmengine - INFO - Epoch(test) [1550/4952]    eta: 0:06:17  time: 0.1093  data_time: 0.0843  memory: 358  
2025/05/28 13:21:01 - mmengine - INFO - Epoch(test) [1600/4952]    eta: 0:06:11  time: 0.1076  data_time: 0.0825  memory: 369  
2025/05/28 13:21:06 - mmengine - INFO - Epoch(test) [1650/4952]    eta: 0:06:05  time: 0.1084  data_time: 0.0835  memory: 358  
2025/05/28 13:21:11 - mmengine - INFO - Epoch(test) [1700/4952]    eta: 0:05:59  time: 0.1082  data_time: 0.0831  memory: 358  
2025/05/28 13:21:17 - mmengine - INFO - Epoch(test) [1750/4952]    eta: 0:05:54  time: 0.1136  data_time: 0.0883  memory: 349  
2025/05/28 13:21:22 - mmengine - INFO - Epoch(test) [1800/4952]    eta: 0:05:48  time: 0.1065  data_time: 0.0814  memory: 349  
2025/05/28 13:21:28 - mmengine - INFO - Epoch(test) [1850/4952]    eta: 0:05:43  time: 0.1105  data_time: 0.0854  memory: 349  
2025/05/28 13:21:33 - mmengine - INFO - Epoch(test) [1900/4952]    eta: 0:05:37  time: 0.1099  data_time: 0.0846  memory: 357  
2025/05/28 13:21:39 - mmengine - INFO - Epoch(test) [1950/4952]    eta: 0:05:31  time: 0.1082  data_time: 0.0825  memory: 362  
2025/05/28 13:21:44 - mmengine - INFO - Epoch(test) [2000/4952]    eta: 0:05:26  time: 0.1097  data_time: 0.0843  memory: 357  
2025/05/28 13:21:50 - mmengine - INFO - Epoch(test) [2050/4952]    eta: 0:05:20  time: 0.1074  data_time: 0.0818  memory: 369  
2025/05/28 13:21:56 - mmengine - INFO - Epoch(test) [2100/4952]    eta: 0:05:15  time: 0.1153  data_time: 0.0893  memory: 358  
2025/05/28 13:22:01 - mmengine - INFO - Epoch(test) [2150/4952]    eta: 0:05:09  time: 0.1108  data_time: 0.0831  memory: 362  
2025/05/28 13:22:06 - mmengine - INFO - Epoch(test) [2200/4952]    eta: 0:05:04  time: 0.1071  data_time: 0.0815  memory: 357  
2025/05/28 13:22:12 - mmengine - INFO - Epoch(test) [2250/4952]    eta: 0:04:58  time: 0.1100  data_time: 0.0845  memory: 369  
2025/05/28 13:22:17 - mmengine - INFO - Epoch(test) [2300/4952]    eta: 0:04:52  time: 0.1069  data_time: 0.0813  memory: 358  
2025/05/28 13:22:23 - mmengine - INFO - Epoch(test) [2350/4952]    eta: 0:04:47  time: 0.1100  data_time: 0.0844  memory: 358  
2025/05/28 13:22:28 - mmengine - INFO - Epoch(test) [2400/4952]    eta: 0:04:41  time: 0.1087  data_time: 0.0828  memory: 358  
2025/05/28 13:22:34 - mmengine - INFO - Epoch(test) [2450/4952]    eta: 0:04:36  time: 0.1102  data_time: 0.0844  memory: 358  
2025/05/28 13:22:39 - mmengine - INFO - Epoch(test) [2500/4952]    eta: 0:04:30  time: 0.1094  data_time: 0.0838  memory: 370  
2025/05/28 13:22:45 - mmengine - INFO - Epoch(test) [2550/4952]    eta: 0:04:24  time: 0.1088  data_time: 0.0832  memory: 349  
2025/05/28 13:22:50 - mmengine - INFO - Epoch(test) [2600/4952]    eta: 0:04:19  time: 0.1104  data_time: 0.0848  memory: 362  
2025/05/28 13:22:56 - mmengine - INFO - Epoch(test) [2650/4952]    eta: 0:04:13  time: 0.1079  data_time: 0.0824  memory: 362  
2025/05/28 13:23:01 - mmengine - INFO - Epoch(test) [2700/4952]    eta: 0:04:08  time: 0.1103  data_time: 0.0845  memory: 369  
2025/05/28 13:23:06 - mmengine - INFO - Epoch(test) [2750/4952]    eta: 0:04:02  time: 0.1073  data_time: 0.0815  memory: 357  
2025/05/28 13:23:12 - mmengine - INFO - Epoch(test) [2800/4952]    eta: 0:03:57  time: 0.1114  data_time: 0.0857  memory: 358  
2025/05/28 13:23:18 - mmengine - INFO - Epoch(test) [2850/4952]    eta: 0:03:51  time: 0.1111  data_time: 0.0854  memory: 358  
2025/05/28 13:23:23 - mmengine - INFO - Epoch(test) [2900/4952]    eta: 0:03:46  time: 0.1102  data_time: 0.0846  memory: 362  
2025/05/28 13:23:29 - mmengine - INFO - Epoch(test) [2950/4952]    eta: 0:03:40  time: 0.1109  data_time: 0.0853  memory: 369  
2025/05/28 13:23:34 - mmengine - INFO - Epoch(test) [3000/4952]    eta: 0:03:35  time: 0.1129  data_time: 0.0871  memory: 349  
2025/05/28 13:23:40 - mmengine - INFO - Epoch(test) [3050/4952]    eta: 0:03:29  time: 0.1095  data_time: 0.0841  memory: 358  
2025/05/28 13:23:45 - mmengine - INFO - Epoch(test) [3100/4952]    eta: 0:03:24  time: 0.1094  data_time: 0.0838  memory: 369  
2025/05/28 13:23:51 - mmengine - INFO - Epoch(test) [3150/4952]    eta: 0:03:18  time: 0.1094  data_time: 0.0839  memory: 358  
2025/05/28 13:23:56 - mmengine - INFO - Epoch(test) [3200/4952]    eta: 0:03:13  time: 0.1105  data_time: 0.0853  memory: 358  
2025/05/28 13:24:02 - mmengine - INFO - Epoch(test) [3250/4952]    eta: 0:03:07  time: 0.1094  data_time: 0.0842  memory: 358  
2025/05/28 13:24:07 - mmengine - INFO - Epoch(test) [3300/4952]    eta: 0:03:02  time: 0.1105  data_time: 0.0853  memory: 357  
2025/05/28 13:24:13 - mmengine - INFO - Epoch(test) [3350/4952]    eta: 0:02:56  time: 0.1076  data_time: 0.0823  memory: 358  
2025/05/28 13:24:18 - mmengine - INFO - Epoch(test) [3400/4952]    eta: 0:02:51  time: 0.1107  data_time: 0.0853  memory: 370  
2025/05/28 13:24:24 - mmengine - INFO - Epoch(test) [3450/4952]    eta: 0:02:45  time: 0.1092  data_time: 0.0841  memory: 357  
2025/05/28 13:24:29 - mmengine - INFO - Epoch(test) [3500/4952]    eta: 0:02:40  time: 0.1099  data_time: 0.0845  memory: 358  
2025/05/28 13:24:34 - mmengine - INFO - Epoch(test) [3550/4952]    eta: 0:02:34  time: 0.1075  data_time: 0.0820  memory: 349  
2025/05/28 13:24:40 - mmengine - INFO - Epoch(test) [3600/4952]    eta: 0:02:28  time: 0.1102  data_time: 0.0846  memory: 369  
2025/05/28 13:24:45 - mmengine - INFO - Epoch(test) [3650/4952]    eta: 0:02:23  time: 0.1099  data_time: 0.0845  memory: 369  
2025/05/28 13:24:51 - mmengine - INFO - Epoch(test) [3700/4952]    eta: 0:02:17  time: 0.1120  data_time: 0.0864  memory: 349  
2025/05/28 13:24:57 - mmengine - INFO - Epoch(test) [3750/4952]    eta: 0:02:12  time: 0.1109  data_time: 0.0854  memory: 358  
2025/05/28 13:25:02 - mmengine - INFO - Epoch(test) [3800/4952]    eta: 0:02:06  time: 0.1093  data_time: 0.0835  memory: 358  
2025/05/28 13:25:08 - mmengine - INFO - Epoch(test) [3850/4952]    eta: 0:02:01  time: 0.1106  data_time: 0.0848  memory: 357  
2025/05/28 13:25:13 - mmengine - INFO - Epoch(test) [3900/4952]    eta: 0:01:55  time: 0.1072  data_time: 0.0815  memory: 358  
2025/05/28 13:25:19 - mmengine - INFO - Epoch(test) [3950/4952]    eta: 0:01:50  time: 0.1120  data_time: 0.0861  memory: 358  
2025/05/28 13:25:24 - mmengine - INFO - Epoch(test) [4000/4952]    eta: 0:01:44  time: 0.1100  data_time: 0.0842  memory: 369  
2025/05/28 13:25:30 - mmengine - INFO - Epoch(test) [4050/4952]    eta: 0:01:39  time: 0.1111  data_time: 0.0853  memory: 362  
2025/05/28 13:25:35 - mmengine - INFO - Epoch(test) [4100/4952]    eta: 0:01:33  time: 0.1113  data_time: 0.0855  memory: 369  
2025/05/28 13:25:41 - mmengine - INFO - Epoch(test) [4150/4952]    eta: 0:01:28  time: 0.1084  data_time: 0.0826  memory: 370  
2025/05/28 13:25:46 - mmengine - INFO - Epoch(test) [4200/4952]    eta: 0:01:22  time: 0.1115  data_time: 0.0858  memory: 349  
2025/05/28 13:25:52 - mmengine - INFO - Epoch(test) [4250/4952]    eta: 0:01:17  time: 0.1092  data_time: 0.0835  memory: 369  
2025/05/28 13:25:57 - mmengine - INFO - Epoch(test) [4300/4952]    eta: 0:01:11  time: 0.1110  data_time: 0.0850  memory: 362  
2025/05/28 13:26:03 - mmengine - INFO - Epoch(test) [4350/4952]    eta: 0:01:06  time: 0.1075  data_time: 0.0816  memory: 369  
2025/05/28 13:26:08 - mmengine - INFO - Epoch(test) [4400/4952]    eta: 0:01:00  time: 0.1119  data_time: 0.0861  memory: 357  
2025/05/28 13:26:14 - mmengine - INFO - Epoch(test) [4450/4952]    eta: 0:00:55  time: 0.1120  data_time: 0.0862  memory: 357  
2025/05/28 13:26:19 - mmengine - INFO - Epoch(test) [4500/4952]    eta: 0:00:49  time: 0.1094  data_time: 0.0837  memory: 358  
2025/05/28 13:26:25 - mmengine - INFO - Epoch(test) [4550/4952]    eta: 0:00:44  time: 0.1101  data_time: 0.0843  memory: 362  
2025/05/28 13:26:30 - mmengine - INFO - Epoch(test) [4600/4952]    eta: 0:00:38  time: 0.1094  data_time: 0.0838  memory: 349  
2025/05/28 13:26:36 - mmengine - INFO - Epoch(test) [4650/4952]    eta: 0:00:33  time: 0.1119  data_time: 0.0860  memory: 357  
2025/05/28 13:26:41 - mmengine - INFO - Epoch(test) [4700/4952]    eta: 0:00:27  time: 0.1071  data_time: 0.0815  memory: 370  
2025/05/28 13:26:47 - mmengine - INFO - Epoch(test) [4750/4952]    eta: 0:00:22  time: 0.1122  data_time: 0.0865  memory: 358  
2025/05/28 13:26:52 - mmengine - INFO - Epoch(test) [4800/4952]    eta: 0:00:16  time: 0.1081  data_time: 0.0826  memory: 349  
2025/05/28 13:26:58 - mmengine - INFO - Epoch(test) [4850/4952]    eta: 0:00:11  time: 0.1110  data_time: 0.0852  memory: 362  
2025/05/28 13:27:03 - mmengine - INFO - Epoch(test) [4900/4952]    eta: 0:00:05  time: 0.1119  data_time: 0.0863  memory: 357  
2025/05/28 13:27:09 - mmengine - INFO - Epoch(test) [4950/4952]    eta: 0:00:00  time: 0.1097  data_time: 0.0838  memory: 362  
2025/05/28 13:27:09 - mmengine - INFO - 
---------------iou_thr: 0.5---------------
2025/05/28 13:27:12 - mmengine - INFO - 
+-------------+------+------+--------+-------+
| class       | gts  | dets | recall | ap    |
+-------------+------+------+--------+-------+
| aeroplane   | 285  | 393  | 0.709  | 0.689 |
| bicycle     | 337  | 611  | 0.887  | 0.805 |
| bird        | 459  | 713  | 0.756  | 0.687 |
| boat        | 263  | 669  | 0.715  | 0.616 |
| bottle      | 469  | 560  | 0.482  | 0.424 |
| bus         | 213  | 448  | 0.906  | 0.843 |
| car         | 1201 | 1645 | 0.834  | 0.798 |
| cat         | 358  | 716  | 0.927  | 0.864 |
| chair       | 756  | 2202 | 0.734  | 0.580 |
| cow         | 244  | 629  | 0.873  | 0.771 |
| diningtable | 206  | 1063 | 0.883  | 0.729 |
| dog         | 489  | 1131 | 0.930  | 0.817 |
| horse       | 348  | 806  | 0.917  | 0.850 |
| motorbike   | 325  | 676  | 0.865  | 0.788 |
| person      | 4528 | 6054 | 0.801  | 0.767 |
| pottedplant | 480  | 833  | 0.581  | 0.436 |
| sheep       | 242  | 494  | 0.789  | 0.686 |
| sofa        | 239  | 973  | 0.933  | 0.788 |
| train       | 282  | 678  | 0.887  | 0.782 |
| tvmonitor   | 308  | 545  | 0.786  | 0.690 |
+-------------+------+------+--------+-------+
| mAP         |      |      |        | 0.721 |
+-------------+------+------+--------+-------+
2025/05/28 13:27:12 - mmengine - INFO - Results has been saved to work_dirs/mask-rcnn_r50_fpn_1x_voc0712/results.pkl.
2025/05/28 13:27:12 - mmengine - INFO - Epoch(test) [4952/4952]    pascal_voc/mAP: 0.7206  pascal_voc/AP50: 0.7210  data_time: 0.0840  time: 0.1102
